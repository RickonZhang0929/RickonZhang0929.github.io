(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{419:function(t,n,v){"use strict";v.r(n);var _=v(2),p=Object(_.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("    如何成为一名高级软件工程师，或是发展成为架构师和技术总监，这是每个软件开发人员都很关注的问题。下面是我对于软件开发职业发展的思考和想法。\n成为高级工程师，那么在自身的开发技术上需要更加精进。")]),t._v(" "),n("p",[t._v("    优秀的代码应该是可读性非常强的代码。写代码的风格没有特别强制的限制，每一个人都有自己的写法，那么一百个人就会有一百种代码的风格和方式，这就不同的人在接触同一套代码的时候，相互很难看懂对方写的内容。因此如何能让对方看懂，代码的注释性和可读性就显得尤为重要。代码的艺术性就来源于它解决问题的清晰的逻辑。这就像在高中做数学题一样，好的方法有时候并非是看起来最巧妙的奇淫巧技，而是按部就班，逻辑清晰的解决方案。因为常规方法不仅普适性强，而且考虑问题也很全面，更加可靠。之前在实习的过程中一直奇怪，为什么相比之下Python不适合作为工程项目的代码？Python的语言特性不是很灵活吗？组里的工程师说就是由于过于灵活，因此不适合。这既是他的优点，也是它的不足，优点在于它的写法足够灵活，每次你想到一种写法，甚至是你臆想出来的写法，它可能都是成立的。但是这就导致它缺少规范，可读性会变差。写代码也同样是如此，优秀的代码具有较好的规范性和可读性，可读性高的代码甚至不需要注释，任何一个掌基础握语法的初学者都可以看懂软件的逻辑，这就能让代码的通用性大大提高。")]),t._v(" "),n("p",[t._v("    优秀的代码应该有较强的健壮性。相比于简单的项目来说，成熟的项目里百分之六十以上的代码解决的是实际中很少出现的情况。因为一旦软件部署到实际的应用环境中，投入使用以后。出现任何小的错误都会造成严重的损失，而且修改起来也会很麻烦。因此要尽可能保证在开发的过程中，提前考虑到各种各样的极端情况，以保证软件运行的稳定性。这就意味着要为代码增加大量的容错机制。而究竟会出现什么样的问题，出现的问题都该如何避免和解决，这些都是在实际的项目中积累出的经验，也是高级工程师需要关注的问题，而不再只是关注正常情况下软件的运行情况。")]),t._v(" "),n("p",[t._v("    代码和性能指标在高级开发中需要被关注。在独立小项目的时候，性能和软件的反应时间不会有太大的影响，但在软件的复杂度和规模上升以后，软件的架构就会产生非常大的影响，普通的项目和复杂的项目，几乎是完全两种项目。在一些对即时交互有较高要求的需求中，反应时间较慢的影响往往是致命的。在这个时候，语言的性能，还有框架的性能，都会成为重要的指标。如何让软件性能满足需求就是需要考虑的问题。")]),t._v(" "),n("p",[t._v("    在拥有了一定的项目经验和编写风格之后，就拥有了通用的技术能力和经验。但是大部分的项目软件都是按照需求特别开发的，通用的项目很少，因此，面对新的需求和新的情境，还要能够进行创新，解决疑难问题，研发出新的技术和产品。除了通用的网页开发能力，高级工程师还应该有自己的技术方向。软件开发其实有很多的分类，包括各种应用级软件，还有一些技术平台如大数据，云计算平台等。不同的研究方向涉及到的工具和技术也是不完全相同的。这就对研发能力提出了较高的要求。如何将创新的技术概念，从理论转化为实际，如何去开发出更高效更实用的工具和模式。不断深入的开发会对技术的能力提出巨大的要求。")]),t._v(" "),n("p",[t._v("    成为高级工程师，还需要有一定的项目管理能力。\n项目管理的流程包括需求分析，文档书写，架构设计，还有分工合作交流等内容。这些看似与写代码无关，但是却深刻地影响着写代码的效率和质量。这也是为什么平时看互联网公司很多的日常都是在开会，而且开会的时间甚至远远超过真正写代码的时间。高质量的项目中，代码开发只占一部分，需求的理解和文档的书写同样重要。敏捷开发的要义是，先做起来，在迭代中改进，但在前期的设计和需求评估阶段，如果能将问题都考虑比较周全，将使得整个实施的过程更加的清晰简洁，因此项目管理的能力也很重要。\n在互联网公司中，经常会有管理岗和技术岗之分。而管理岗通常进行的就是项目管理。高级工程师的一个特点就是它不仅可以自己单兵作战，而且可以对团队作战进行管理。高级工程师的职业发展方向有两种选择，一种是在技术上深耕，一种是转为管理人员。技术的发展目标更多是成为一名架构师，管理的发展目标是成为团队的研发总监。那么这些职位究竟日常工作在做什么？又有什么要求？下面是我根据所见所得的一些思考。")]),t._v(" "),n("p",[t._v("    这两者要求的共同点是技术的沉淀，两种职位的基础肯定是高级工程师，有完整的项目经验。区别在于对于架构师的要求在于参与技术选型，即用最合适的技术选型来最高效解决问题。没有哪一种语言和架构是完美的，不同的选择有不同的特点和其适合的情境，根据需求将业务抽象化，选择更合适的方式，更熟悉的方式来搭建起项目的框架是架构师应该做的事情。")]),t._v(" "),n("p",[t._v("    对于总监来说是沟通和项目管理能力。很多时候一个人是没有办法将所有技术面面俱到的，管理者同样也如此。总监需要有经验，但并不一定是开发最熟练的。在大量的时间用于管理以后，写代码的熟练度必然会下降，更不用说在这个不进则退的环境中。总监的职责更重要的是在遇到一个新的项目时，如何将所有人的经验发挥出来，让更擅长此类项目的人来负责相应的部分。在开发中同样拥有短板效应。选型应该让所有参与开发的人员都能理解且接受。管理者也需要让所有人都知道自己干什么和怎么干。这样的沟通能力是总监必不可少的能力。项目管理上团队可能要同时面对多条业务线，因此总监需要进行项目的排期和进度监管，承担一定的压力来保证任务按时交付，这非常考验管理者的能力。")]),t._v(" "),n("p",[t._v("    成为一名高级的软件工程师要在实现业务功能的基础上更加关注代码的可读性，健壮性和性能方面，提升项目管理的能力。在职业发展方面，技术上关注技术的选型和架构，管理方面提高与人沟通能力，多提高自己的不可替代性，如此便能更好地在技术道路上长远走下去。")])])}),[],!1,null,null,null);n.default=p.exports}}]);